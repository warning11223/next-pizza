// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  fullName String
  email    String   @unique
  password String
  verified DateTime

  role             UserRole
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  Cart             Cart?
  CartItem         CartItem[]
  Order            Order[]
  VerificationCode VerificationCode?
}

model Product {
  id       Int    @id @default(autoincrement())
  name     String
  imageUrl String

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  items ProductItem[]

  ingredients Ingredient[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model ProductItem {
  id Int @id @default(autoincrement())

  price     Int
  size      Int?
  pizzaType Int?

  cartItems CartItem[]

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ingredient {
  id Int @id @default(autoincrement())

  name     String
  price    Int
  imageUrl String

  products  Product[]
  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id Int @id @default(autoincrement())

  userId Int?  @unique
  user   User? @relation(fields: [userId], references: [id])

  tokenId String?

  totalAmount Int @default(0)

  items CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id Int @id @default(autoincrement())

  productItemId Int
  productItem   ProductItem @relation(fields: [productItemId], references: [id])

  cartId Int
  cart   Cart @relation(fields: [cartId], references: [id])

  ingredients Ingredient[]
  quantity    Int
  pizzaSize   Int?
  type        Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model Order {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  items Json?

  status      OrderStatus @default(PENDING)
  totalAmount Int
  paymentId   String?

  fullName String
  address  String
  email    String
  phone    String
  comment  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id Int @id @default(autoincrement())

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  code String

  expiresAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, code])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}
